<resources>
    <string name="app_name">Playground</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="title_activity_home">HomeActivity</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>

    <string name="action_settings">Settings</string>

    <string name="RXCombineFragmentHelp">
        Here we demonstrate the Observable.combineLatest() method that will combine events from two different observables.\n\nWe create two observables from the two text views and create a third that combines them and updated the view below.
    </string>

    <string name="RXStreamFragment">
        Here we demonstrate how easy it is to create streams of UI elements such as create a dialog box, take input and then update a view.
    </string>

    <string name="RXRetrofitFragment">
        Here we demonstrate Retrofit and RX working together. Retrofit will return an Observable from the REST call which is then used to update a RecyclerView.\n\nWe have ensured that the Retrofit call is running on a parallel thread and the result is obtained on the main thread so we can update a view.\nYou can click the button many times to see this effect.
    </string>
    <string name="RXFlowValidationHelp">Testing a complex flow with different error scenarios</string>
    <string name="QueueNetworkReqFragment">This example will show how to queue up network requests when there is no network and when we get network, to replay all the messages in the queue. For simplicity sake, instead of creating a service that checks if we have network, we just click a button. The queue will be persisted and thus will keep messages after app closes.</string>
</resources>
